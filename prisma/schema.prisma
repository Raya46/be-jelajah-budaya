// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN_DAERAH
  USER
  SUPER_ADMIN
}

enum Status {
  ACCEPT
  PENDING
  REJECT
}

model User {
  id                 Int                  @id @default(autoincrement())
  username           String
  email              String               @unique
  password           String
  role               Role                 @default(USER)
  ktp                String?
  alamat             String?
  portofolio         String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  RequestAdminDaerah RequestAdminDaerah[]
  UserEventRating    UserEventRating[]
}

model Provinsi {
  id        Int      @id @default(autoincrement())
  nama      String
  gambar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Daerah    Daerah[]
}

model Daerah {
  id                 Int                  @id @default(autoincrement())
  nama               String
  gambar             String?
  provinsiId         Int
  provinsi           Provinsi             @relation(fields: [provinsiId], references: [id])
  Budaya             Budaya[]
  RequestAdminDaerah RequestAdminDaerah[]
  Event              Event[]
}

model Budaya {
  id        Int      @id @default(autoincrement())
  nama      String
  deskripsi String
  gambar    String?
  daerahId  Int
  daerah    Daerah   @relation(fields: [daerahId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RequestAdminDaerah {
  id         Int      @id @default(autoincrement())
  namaDaerah String?
  status     Status   @default(PENDING)
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  daerahId   Int
  daerah     Daerah   @relation(fields: [daerahId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Event {
  id              Int               @id @default(autoincrement())
  nama            String
  deskripsi       String
  gambar          String?
  tanggal         DateTime
  lokasi          String
  daerahId        Int
  daerah          Daerah            @relation(fields: [daerahId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  UserEventRating UserEventRating[]
}

model UserEventRating {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id])
  rating    Int?
  review    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
